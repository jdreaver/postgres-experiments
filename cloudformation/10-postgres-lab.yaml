AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for postgres lab'

Parameters:
  User:
    Type: String
    Description: Username for resource naming and tags

  PublicIP:
    Type: String
    Description: Public IP address for SSH access

  InstanceType:
    Type: String
    Default: m6i.2xlarge

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

  VpcCidr:
    Type: String
    Description: CIDR block for the VPC

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs

  UbuntuAmiId:
    Type: AWS::EC2::Image::Id
    Description: Ubuntu AMI ID

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${User}-postgres-lab
      GroupDescription: Security group for accessing postgres lab machines
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow traffic from my IP address
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub ${PublicIP}/32
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Sub ${PublicIP}/32
        - IpProtocol: tcp
          FromPort: 6432
          ToPort: 6432
          CidrIp: !Sub ${PublicIP}/32
        # Allow all VPC traffic
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${User}-postgres-lab
        - Key: contact
          Value: !Ref User

  # Allow all instances in the security group to talk amongst each other
  # over all ports.
  SecurityGroupSelfIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  PostgresIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${User}-postgres-s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${User}-postgres-lab
                  - !Sub arn:aws:s3:::${User}-postgres-lab/*
        - PolicyName: !Sub ${User}-postgres-dynamodb-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # TODO: Restrict permissions
                  - 'dynamodb:*'
                Resource:
                  - '*'
      Tags:
        - Key: contact
          Value: !Ref User

  PostgresInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref PostgresIAMRole

  PostgresLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${User}-postgres-launch-template
      LaunchTemplateData:
        ImageId: !Ref UbuntuAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref User
        SecurityGroupIds:
          - !Ref SecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt PostgresInstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 100
              VolumeType: gp3
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${User}-postgres
              - Key: contact
                Value: !Ref User
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${User}-postgres
              - Key: contact
                Value: !Ref User
        UserData:
          Fn::Base64:
            !Sub |
              #!/usr/bin/env bash

              set -euo pipefail

              export PGLAB_USER=${User}

              # Install awscli
              apt-get update
              apt-get install -y unzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              rm -rf aws awscliv2.zip
              aws --version

              # Download and run instance-specific scripts
              aws s3 cp "s3://$PGLAB_USER-postgres-lab/common-setup.sh" /tmp/
              chmod +x /tmp/common-setup.sh
              /tmp/common-setup.sh

              aws s3 cp "s3://$PGLAB_USER-postgres-lab/postgres-setup.sh" /tmp/
              chmod +x /tmp/postgres-setup.sh
              /tmp/postgres-setup.sh

  PostgresASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${User}-postgres-asg
      VPCZoneIdentifier: !Ref SubnetIds
      DesiredCapacity: 3
      MinSize: 1
      MaxSize: 10
      LaunchTemplate:
        LaunchTemplateId: !Ref PostgresLaunchTemplate
        Version: !GetAtt PostgresLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref PostgresPrimaryTargetGroup
        - !Ref PostgresAllNodesTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${User}-postgres
          PropagateAtLaunch: true
        - Key: contact
          Value: !Ref User
          PropagateAtLaunch: true

  # For development, it is easier to let pgdaemon create the table on
  # demand so we can wipe it easily.
  #
  # DDBTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: pgdaemon-clusters
  #     AttributeDefinitions:
  #       - AttributeName: cluster_name
  #         AttributeType: S
  #       - AttributeName: key
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: cluster_name
  #         KeyType: HASH
  #       - AttributeName: key
  #         KeyType: RANGE
  #     BillingMode: PAY_PER_REQUEST
  #     Tags:
  #       - Key: contact
  #         Value: !Ref User

  PostgresNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${User}-postgres-nlb
      Scheme: internet-facing
      Type: network
      Subnets: !Ref SubnetIds
      Tags:
        - Key: contact
          Value: !Ref User

  PostgresPrimaryTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: postgres-primary-tg
      Port: 6432 # pgbouncer port
      Protocol: TCP
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080 # pgdaemon port
      HealthCheckPath: /primary
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      TargetType: instance
      Tags:
        - Key: contact
          Value: !Ref User

  PostgresAllNodesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: postgres-all-nodes-tg
      Port: 6432  # pbbouncer port
      Protocol: TCP
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080 # pgdaemon port
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      TargetType: instance
      Tags:
        - Key: contact
          Value: !Ref User

  PrimaryListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PostgresPrimaryTargetGroup
      LoadBalancerArn: !Ref PostgresNLB
      Port: 5432
      Protocol: TCP
      Tags:
        - Key: contact
          Value: !Ref User

  AllNodesListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PostgresAllNodesTargetGroup
      LoadBalancerArn: !Ref PostgresNLB
      Port: 5433
      Protocol: TCP
      Tags:
        - Key: contact
          Value: !Ref User

Outputs:
  SecurityGroupId:
    Description: ID of the Security Group
    Value: !Ref SecurityGroup
  PostgresAutoScalingGroupName:
    Description: Name of the postgres ASG
    Value: !Ref PostgresASG
  PostgresIAMRoleArn:
    Description: ARN of the IAM Role
    Value: !GetAtt PostgresIAMRole.Arn
  NLBDNSName:
    Description: DNS name of the NLB
    Value: !GetAtt PostgresNLB.DNSName
  PrimaryEndpoint:
    Description: Endpoint for postgres primaries
    Value: !Sub ${PostgresNLB.DNSName}:5432
  AllNodesEndpoint:
    Description: Endpoint for all postgres nodes
    Value: !Sub ${PostgresNLB.DNSName}:5433
